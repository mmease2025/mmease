data_label <- cbind(labels, data)
x <- data_label
colnames(x)[1] <- "labels"
test.fold <- split(sample(1:length(labels)), 1:folds)
for (mm in 1:folds) {
test <- test.fold[[mm]]
train_df <- x[-test, ]
test_df <- x[test, ]
iris.rf <- randomForest(labels ~ ., data = train_df, importance = TRUE, proximity = TRUE)
pre_iris <- predict(iris.rf, test_df)
true_label <- dummies::dummy(test_df$labels, sep = ".")
true_label <- data.frame(true_label)
colnames(true_label) <- gsub(".*?\\.", "", colnames(true_label))
colnames(true_label) <- paste0(colnames(true_label), "_true")
pred_label <- dummies::dummy(pre_iris, sep = ".")
pred_label <- data.frame(pred_label)
colnames(pred_label) <- gsub(".*?\\.", "", colnames(pred_label))
colnames(pred_label) <- paste0(colnames(pred_label), "_pred_SVM")
final_df_2 <- cbind(true_label, pred_label)
final_df2_t <- t(final_df_2)
final_df2_t_la <- rownames(final_df2_t)
final_df2_t_c <- as.data.frame(cbind(final_df2_t_la, final_df2_t))
import_f <- iris.rf$importance[, 4]
import_s <- import_f[order(import_f, decreasing = T)][1:10]
import_a <- as.data.frame(cbind(row.names(t(t(import_s))), t(t(import_s))))
colnames(import_a) <- c("V1", paste0("V_", mm))
if (mm == 1) {
final_df_m <- final_df2_t_c
imports <- import_a
} else {
final_df_m <- merge(final_df_m, final_df2_t_c, by = "final_df2_t_la", all = T)
imports <- merge(imports, import_a, by = "V1", all = T)
}
}
final_res[[1]] <- final_df_m
final_res[[2]] <- imports
return(final_res)
} else if (method == "Support Vector Machine") {
set.seed(10)
final_res <- list()
data_label <- cbind(as.numeric(labels), data)
x <- data_label
y <- factor(data_label[, 1])
colnames(x)[1] <- "labels"
test.fold <- split(sample(1:length(labels)), 1:folds)
for (mm in 1:folds) {
test <- test.fold[[mm]]
train_df <- x[-test, ]
test_df <- x[test, ]
svmmodel <- svm(labels ~ ., data = train_df, kernel = "radial", type = "C-classification", probability = TRUE)
svm_pred <- predict(svmmodel, test_df, probability = TRUE)
svm_pred <- attr(svm_pred, "probabilities")
colnames(svm_pred) <- paste0(colnames(svm_pred), "_pred_SVM")
true_label <- dummies::dummy(test_df$labels, sep = ".")
true_label <- data.frame(true_label)
colnames(true_label) <- gsub(".*?\\.", "", colnames(true_label))
colnames(true_label) <- paste0(colnames(true_label), "_true")
final_df_2 <- cbind(true_label, svm_pred)
final_df2_t <- t(final_df_2)
final_df2_t_la <- rownames(final_df2_t)
final_df2_t_c <- as.data.frame(cbind(final_df2_t_la, final_df2_t))
w <- t(svmmodel$coefs) %*% svmmodel$SV
rankingCriteria <- w * w
ranking <- rev(sort(rankingCriteria[1, ]))
import_f <- t(t(ranking))
import_s <- import_f[order(import_f, decreasing = T)][1:10]
import_a <- as.data.frame(cbind(row.names(t(t(import_f))), t(t(import_s))))
colnames(import_a) <- c("V1", paste0("V_", mm))
if (mm == 1) {
final_df_m <- final_df2_t_c
imports <- import_a
} else {
final_df_m <- merge(final_df_m, final_df2_t_c, by = "final_df2_t_la", all = T)
imports <- merge(imports, import_a, by = "V1", all = T)
}
}
final_res[[1]] <- final_df_m
final_res[[2]] <- imports
return(final_res)
} else {
stop(paste("Invalid method:", method))
}
}
class3 <- classification1(corrected_data1,method = "Decision Trees")
class4 <- classification1(corrected_data1,method = "K-Nearest Neighbor")
class1 <- classification1(corrected_data1,method = "AdaBoost")
class2 <- classification1(corrected_data1,method = "Bagging")
class5 <- classification1(corrected_data1,method = "Linear Discriminat Analysis")
class6 <- classification1(corrected_data1,method = "Naive Bayes")
class7 <- classification1(corrected_data1,method = "Partial Least Squares")
class8 <- classification1(corrected_data1,method = "Random Forest")
class9 <- classification1(corrected_data1,method = "Support Vector Machine")
remove.packages("MMEASE")
install.packages("C:/Users/Administrator/Documents/MMEASE_1.0.0.tar.gz", repos = NULL, type = "source")
library(MMEASE)
data <- read.csv("D:/server/mmease2025/MTBLS78_co_culture.csv")
filted_data <- filtering(data, 0.2)
imputed_data1 <- imputation(filted_data, method = "1/5 of minimum positive value")
imputed_data2 <- imputation(filted_data, method = "KNN")
transformed_data1 <- transformation(imputed_data1, method = "G-log")
transformed_data2 <- transformation(imputed_data1, method = "Log2")
transformed_data3 <- transformation(imputed_data1, method = "Log10")
normalized_data1 <- normalization(transformed_data1, method = "Auto Scaling")
normalized_data3 <- normalization(transformed_data1, method = "Mean")
normalized_data4 <- normalization(transformed_data1, method = "Median")
normalized_data5 <- normalization(transformed_data1, method = "MSTUS")
normalized_data6 <- normalization(transformed_data1, method = "SIS")
corrected_data1 <- batch_correction(normalized_data1, method = "ComBat")
corrected_data2 <- batch_correction(normalized_data1, method = "Limma")
res1 <- DifferentialAnalysis(corrected_data1,method = "t_test")
res2 <- DifferentialAnalysis(corrected_data1,method = "ANOVA")
res3 <- DifferentialAnalysis(corrected_data1,method = "FC")
res4 <- DifferentialAnalysis(corrected_data1,method = "PLS-DA")
res5 <- DifferentialAnalysis(corrected_data1,method = "OPLS-DA")
res6 <- DifferentialAnalysis(corrected_data1,method = "RF_RFE")
res7 <- DifferentialAnalysis(corrected_data1,method = "Kruskal_Wallis")
class1 <- classification(corrected_data1,method = "AdaBoost")
class3 <- classification(corrected_data1,method = "Decision Trees")
class4 <- classification(corrected_data1,method = "K-Nearest Neighbor")
?DifferentialAnalysis
library(MMEASE)
?DifferentialAnalysis
devtools::document()
devtools::document()
devtools::load_all()
?classification
res1 <- DifferentialAnalysis(corrected_data1,method = "t_test")
devtools::install_github("bananalab3/banana")
data <- read.csv("D:/server/mmease2025/MTBLS78_co_culture.csv")
filted_data <- filtering(data, 0.2)
imputed_data1 <- imputation(filted_data, method = "1/5 of minimum positive value")
imputed_data2 <- imputation(filted_data, method = "KNN")
transformed_data1 <- transformation(imputed_data1, method = "G-log")
transformed_data2 <- transformation(imputed_data1, method = "Log2")
transformed_data3 <- transformation(imputed_data1, method = "Log10")
normalized_data1 <- normalization(transformed_data1, method = "Auto Scaling")
?classification
?banana
??banana
library (banana)
filted_data <- filtering(data, 0.2)
imputed_data1 <- imputation(filted_data, method = "1/5 of minimum positive value")
imputed_data2 <- imputation(filted_data, method = "KNN")
transformed_data1 <- transformation(imputed_data1, method = "G-log")
transformed_data2 <- transformation(imputed_data1, method = "Log2")
transformed_data3 <- transformation(imputed_data1, method = "Log10")
normalized_data1 <- normalization(transformed_data1, method = "Auto Scaling")
normalized_data3 <- normalization(transformed_data1, method = "Mean")
normalized_data4 <- normalization(transformed_data1, method = "Median")
normalized_data5 <- normalization(transformed_data1, method = "MSTUS")
normalized_data6 <- normalization(transformed_data1, method = "SIS")
corrected_data1 <- batch_correction(normalized_data1, method = "ComBat")
corrected_data2 <- batch_correction(normalized_data1, method = "Limma")
res1 <- DifferentialAnalysis(corrected_data1,method = "t_test")
res2 <- DifferentialAnalysis(corrected_data1,method = "ANOVA")
res3 <- DifferentialAnalysis(corrected_data1,method = "FC")
res4 <- DifferentialAnalysis(corrected_data1,method = "PLS-DA")
res5 <- DifferentialAnalysis(corrected_data1,method = "OPLS-DA")
res6 <- DifferentialAnalysis(corrected_data1,method = "RF_RFE")
res7 <- DifferentialAnalysis(corrected_data1,method = "Kruskal_Wallis")
class1 <- classification(corrected_data1,method = "AdaBoost")
classification_plots <- function(final_res_output) {
class_data <- function() {
class.data <- list()
final_df_m <- final_res_output[[1]]
final_df_m[is.na(final_df_m)] <- 0
rownames(final_df_m) <- final_df_m[, 1]
final_df_m_t <- as.data.frame(t(final_df_m[, -1]))
final_df_m_t <- apply(final_df_m_t, 2, as.numeric)
roc_res <- multi_roc(final_df_m_t, force_diag = TRUE)
if (is.null(roc_res)) {
stop("ROC computation failed. Check the input data.")
}
plot_roc_df <- plot_roc_data(roc_res)
class.data$plot_roc_df <- plot_roc_df
if (!is.numeric(final_df_m_t)) {
stop("Input data for RP_curve must be numeric.")
}
RPdata <- RP_curve(final_df_m_t, force_diag = TRUE)
if (is.null(RPdata)) {
stop("PR computation failed. Check the input data.")
}
class.data$RPdata <- RPdata
return(class.data)
}
auc_plot <- function() {
class.data <- class_data()
plot_roc_df <- class.data$plot_roc_df
plot_roc_df_mic <- subset(plot_roc_df, Group == "Micro")
AUC_mic <- round(unique(plot_roc_df_mic$AUC), 3)
plot(x = c(0, 1), y = c(0, 1), col = "grey", lty = 2, type = "l",
xlim = c(0, 1), ylim = c(0, 1), lwd = 1,
xlab = "1 - Specificity", ylab = "Sensitivity")
lines(x = 1 - plot_roc_df_mic$Specificity, y = plot_roc_df_mic$Sensitivity,
col = "#C16E71", lwd = 2)
legend("bottomright", legend = c("Random Guess", "ROC Curve"),
col = c("grey", "#C16E71"), lty = c(2, 1), lwd = c(1, 2), cex = 0.8)
}
PR_plot <- function() {
class.data <- class_data()
RPdata <- class.data$RPdata
plot(x = c(0, 1), y = c(1, 0), col = "grey", lty = 2, type = "l",
xlim = c(0, 1), ylim = c(0, 1), lwd = 1,
xlab = "Recall", ylab = "Precision")
lines(x = RPdata$TPR$SVM$micro, y = RPdata$PPV$SVM$micro,
col = "#ABC8E5", lwd = 2)
legend("bottomleft", legend = c("Baseline", "PR Curve"),
col = c("grey", "#ABC8E5"), lty = c(2, 1), lwd = c(1, 2), cex = 0.8)
}
AUC_ROC <- function() {
class.data <- class_data()
plot_roc_df <- class.data$plot_roc_df
plot_roc_df_mic <- subset(plot_roc_df, Group == "Micro")
AUC_R <- round(unique(plot_roc_df_mic$AUC), 3)
AUC_ROC_text <- paste0("The AUC Value of ROC Curve is ", AUC_R)
return(AUC_ROC_text)
}
AUC_PR <- function() {
class.data <- class_data()
RPdata <- class.data$RPdata
AUC_P <- round(RPdata$PR$SVM$macro, 3)
AUC_PR_text <- paste0("The AUC Value of PR Curve is ", AUC_P)
return(AUC_PR_text)
}
return(list(
auc_plot = auc_plot,
PR_plot = PR_plot,
AUC_ROC = AUC_ROC(),
AUC_PR = AUC_PR()
))
}
fff <- classification_plots(class1)
classification_plots <- function(final_res_output) {
library(magrittr)
RP_curve <- function(data, force_diag = TRUE) {
group_names <- colnames(data)[grepl("_true", colnames(data))] %>%
gsub("(.*)_true", "\\1", .)
method_names <- colnames(data)[grepl("_pred.*", colnames(data))] %>%
gsub(".*_pred_(.*)", "\\1", .) %>% unique
y_true <- data[, grepl("_true", colnames(data))]
colnames(y_true) <- gsub("_true", "", colnames(y_true))
y_true <- y_true[, match(group_names, colnames(y_true))]
res_sp <- list()
res_se <- list()
res_auc <- list()
for (i in seq_along(method_names)) {
res_sp[[i]] <- list()
res_se[[i]] <- list()
res_auc[[i]] <- list()
method <- method_names[i]
y_pred <- data[, grepl(method, colnames(data))]
colnames(y_pred) <- gsub("_pred.*", "", colnames(y_pred))
y_pred <- y_pred[, match(group_names, colnames(y_pred))]
for (j in seq_along(group_names)) {
y_true_vec <- as.numeric(y_true[, j])
y_pred_vec <- as.numeric(y_pred[, j])
valid_idx <- which(!is.na(y_true_vec) & !is.na(y_pred_vec))
y_true_vec <- y_true_vec[valid_idx]
y_pred_vec <- y_pred_vec[valid_idx]
if (length(y_true_vec) > 1) {
roc_res <- cal_confus(y_true_vec, y_pred_vec, force_diag = force_diag)
res_sp[[i]][[j]] <- roc_res$TPR
res_se[[i]][[j]] <- roc_res$PPV
res_auc[[i]][[j]] <- cal_auc(X = roc_res$TPR, Y = roc_res$PPV)
} else {
res_sp[[i]][[j]] <- NA
res_se[[i]][[j]] <- NA
res_auc[[i]][[j]] <- NA
}
}
names(res_sp[[i]]) <- group_names
names(res_se[[i]]) <- group_names
names(res_auc[[i]]) <- group_names
all_sp <- res_sp[[i]] %>% unlist %>% unique %>% sort(decreasing = TRUE)
all_se <- rep(0, length(all_sp))
for (j in seq_along(group_names)) {
all_se <- all_se + approx(res_sp[[i]][[j]], res_se[[i]][[j]],
all_sp, yleft = 1, yright = 0)$y
}
all_se <- all_se / length(group_names)
res_sp[[i]]$macro <- all_sp
res_se[[i]]$macro <- all_se
res_auc[[i]]$macro <- cal_auc(X = res_sp[[i]]$macro, Y = res_se[[i]]$macro)
y_true_vec_bin <- as.numeric(as.vector(as.matrix(y_true)))
y_pred_vec_bin <- as.numeric(as.vector(as.matrix(y_pred)))
roc_res_bin <- cal_confus(y_true_vec_bin, y_pred_vec_bin)
res_sp[[i]]$micro <- roc_res_bin$TPR
res_se[[i]]$micro <- roc_res_bin$PPV
res_auc[[i]]$micro <- cal_auc(X = res_sp[[i]]$micro, Y = res_se[[i]]$micro)
}
names(res_sp) <- method_names
names(res_se) <- method_names
names(res_auc) <- method_names
return(list(TPR = res_sp, PPV = res_se, PR = res_auc,
Methods = method_names, Groups = group_names))
}
class_data <- function() {
class.data <- list()
final_df_m <- final_res_output[[1]]
final_df_m[is.na(final_df_m)] <- 0
rownames(final_df_m) <- final_df_m[, 1]
final_df_m_t <- as.data.frame(t(final_df_m[, -1]))
final_df_m_t <- apply(final_df_m_t, 2, as.numeric)
roc_res <- multi_roc(final_df_m_t, force_diag = TRUE)
if (is.null(roc_res)) {
stop("ROC computation failed. Check the input data.")
}
plot_roc_df <- plot_roc_data(roc_res)
class.data$plot_roc_df <- plot_roc_df
if (!is.numeric(final_df_m_t)) {
stop("Input data for RP_curve must be numeric.")
}
RPdata <- RP_curve(final_df_m_t, force_diag = TRUE)
if (is.null(RPdata)) {
stop("PR computation failed. Check the input data.")
}
class.data$RPdata <- RPdata
return(class.data)
}
auc_plot <- function() {
class.data <- class_data()
plot_roc_df <- class.data$plot_roc_df
plot_roc_df_mic <- subset(plot_roc_df, Group == "Micro")
AUC_mic <- round(unique(plot_roc_df_mic$AUC), 3)
plot(x = c(0, 1), y = c(0, 1), col = "grey", lty = 2, type = "l",
xlim = c(0, 1), ylim = c(0, 1), lwd = 1,
xlab = "1 - Specificity", ylab = "Sensitivity")
lines(x = 1 - plot_roc_df_mic$Specificity, y = plot_roc_df_mic$Sensitivity,
col = "#C16E71", lwd = 2)
legend("bottomright", legend = c("Random Guess", "ROC Curve"),
col = c("grey", "#C16E71"), lty = c(2, 1), lwd = c(1, 2), cex = 0.8)
}
PR_plot <- function() {
class.data <- class_data()
RPdata <- class.data$RPdata
plot(x = c(0, 1), y = c(1, 0), col = "grey", lty = 2, type = "l",
xlim = c(0, 1), ylim = c(0, 1), lwd = 1,
xlab = "Recall", ylab = "Precision")
lines(x = RPdata$TPR$SVM$micro, y = RPdata$PPV$SVM$micro,
col = "#ABC8E5", lwd = 2)
legend("bottomleft", legend = c("Baseline", "PR Curve"),
col = c("grey", "#ABC8E5"), lty = c(2, 1), lwd = c(1, 2), cex = 0.8)
}
AUC_ROC <- function() {
class.data <- class_data()
plot_roc_df <- class.data$plot_roc_df
plot_roc_df_mic <- subset(plot_roc_df, Group == "Micro")
AUC_R <- round(unique(plot_roc_df_mic$AUC), 3)
AUC_ROC_text <- paste0("The AUC Value of ROC Curve is ", AUC_R)
return(AUC_ROC_text)
}
AUC_PR <- function() {
class.data <- class_data()
RPdata <- class.data$RPdata
AUC_P <- round(RPdata$PR$SVM$macro, 3)
AUC_PR_text <- paste0("The AUC Value of PR Curve is ", AUC_P)
return(AUC_PR_text)
}
return(list(
auc_plot = auc_plot,
PR_plot = PR_plot,
AUC_ROC = AUC_ROC(),
AUC_PR = AUC_PR()
))
}
fff <- classification_plots(class1)
View(fff)
classification_plots <- function(final_res_output) {
library(magrittr)
RP_curve <- function(data, force_diag = TRUE) {
group_names <- colnames(data)[grepl("_true", colnames(data))] %>%
gsub("(.*)_true", "\\1", .)
method_names <- colnames(data)[grepl("_pred.*", colnames(data))] %>%
gsub(".*_pred_(.*)", "\\1", .) %>% unique
y_true <- data[, grepl("_true", colnames(data))]
colnames(y_true) <- gsub("_true", "", colnames(y_true))
y_true <- y_true[, match(group_names, colnames(y_true))]
res_sp <- list()
res_se <- list()
res_auc <- list()
for (i in seq_along(method_names)) {
res_sp[[i]] <- list()
res_se[[i]] <- list()
res_auc[[i]] <- list()
method <- method_names[i]
y_pred <- data[, grepl(method, colnames(data))]
colnames(y_pred) <- gsub("_pred.*", "", colnames(y_pred))
y_pred <- y_pred[, match(group_names, colnames(y_pred))]
for (j in seq_along(group_names)) {
y_true_vec <- as.numeric(y_true[, j])
y_pred_vec <- as.numeric(y_pred[, j])
valid_idx <- which(!is.na(y_true_vec) & !is.na(y_pred_vec))
y_true_vec <- y_true_vec[valid_idx]
y_pred_vec <- y_pred_vec[valid_idx]
if (length(y_true_vec) > 1) {
roc_res <- cal_confus(y_true_vec, y_pred_vec, force_diag = force_diag)
res_sp[[i]][[j]] <- roc_res$TPR
res_se[[i]][[j]] <- roc_res$PPV
res_auc[[i]][[j]] <- cal_auc(X = roc_res$TPR, Y = roc_res$PPV)
} else {
res_sp[[i]][[j]] <- NA
res_se[[i]][[j]] <- NA
res_auc[[i]][[j]] <- NA
}
}
names(res_sp[[i]]) <- group_names
names(res_se[[i]]) <- group_names
names(res_auc[[i]]) <- group_names
all_sp <- res_sp[[i]] %>% unlist %>% unique %>% sort(decreasing = TRUE)
all_se <- rep(0, length(all_sp))
for (j in seq_along(group_names)) {
all_se <- all_se + approx(res_sp[[i]][[j]], res_se[[i]][[j]],
all_sp, yleft = 1, yright = 0)$y
}
all_se <- all_se / length(group_names)
res_sp[[i]]$macro <- all_sp
res_se[[i]]$macro <- all_se
res_auc[[i]]$macro <- cal_auc(X = res_sp[[i]]$macro, Y = res_se[[i]]$macro)
y_true_vec_bin <- as.numeric(as.vector(as.matrix(y_true)))
y_pred_vec_bin <- as.numeric(as.vector(as.matrix(y_pred)))
roc_res_bin <- cal_confus(y_true_vec_bin, y_pred_vec_bin)
res_sp[[i]]$micro <- roc_res_bin$TPR
res_se[[i]]$micro <- roc_res_bin$PPV
res_auc[[i]]$micro <- cal_auc(X = res_sp[[i]]$micro, Y = res_se[[i]]$micro)
}
names(res_sp) <- method_names
names(res_se) <- method_names
names(res_auc) <- method_names
return(list(TPR = res_sp, PPV = res_se, PR = res_auc,
Methods = method_names, Groups = group_names))
}
class_data <- function() {
class.data <- list()
final_df_m <- final_res_output[[1]]
final_df_m[is.na(final_df_m)] <- 0
rownames(final_df_m) <- final_df_m[, 1]
final_df_m_t <- as.data.frame(t(final_df_m[, -1]))
final_df_m_t <- apply(final_df_m_t, 2, as.numeric)
roc_res <- multi_roc(final_df_m_t, force_diag = TRUE)
if (is.null(roc_res)) {
stop("ROC computation failed. Check the input data.")
}
plot_roc_df <- plot_roc_data(roc_res)
class.data$plot_roc_df <- plot_roc_df
if (!is.numeric(final_df_m_t)) {
stop("Input data for RP_curve must be numeric.")
}
RPdata <- RP_curve(final_df_m_t, force_diag = TRUE)
if (is.null(RPdata)) {
stop("PR computation failed. Check the input data.")
}
class.data$RPdata <- RPdata
return(class.data)
}
# 设置绘图布局为 1 行 2 列
par(mfrow = c(1, 2))
# 生成 AUC 图
class.data <- class_data()
plot_roc_df <- class.data$plot_roc_df
plot_roc_df_mic <- subset(plot_roc_df, Group == "Micro")
AUC_mic <- round(unique(plot_roc_df_mic$AUC), 3)
plot(x = c(0, 1), y = c(0, 1), col = "grey", lty = 2, type = "l",
xlim = c(0, 1), ylim = c(0, 1), lwd = 1,
xlab = "1 - Specificity", ylab = "Sensitivity")
lines(x = 1 - plot_roc_df_mic$Specificity, y = plot_roc_df_mic$Sensitivity,
col = "#C16E71", lwd = 2)
legend("bottomright", legend = c("Random Guess", "ROC Curve"),
col = c("grey", "#C16E71"), lty = c(2, 1), lwd = c(1, 2), cex = 0.8)
# 生成 PR 图
RPdata <- class.data$RPdata
plot(x = c(0, 1), y = c(1, 0), col = "grey", lty = 2, type = "l",
xlim = c(0, 1), ylim = c(0, 1), lwd = 1,
xlab = "Recall", ylab = "Precision")
lines(x = RPdata$TPR$SVM$micro, y = RPdata$PPV$SVM$micro,
col = "#ABC8E5", lwd = 2)
legend("bottomleft", legend = c("Baseline", "PR Curve"),
col = c("grey", "#ABC8E5"), lty = c(2, 1), lwd = c(1, 2), cex = 0.8)
# 恢复默认绘图布局
par(mfrow = c(1, 1))
# 生成 AUC_ROC 文本
AUC_R <- round(unique(plot_roc_df_mic$AUC), 3)
AUC_ROC_text <- paste0("The AUC Value of ROC Curve is ", AUC_R)
print(AUC_ROC_text)
# 生成 AUC_PR 文本
AUC_P <- round(RPdata$PR$SVM$macro, 3)
AUC_PR_text <- paste0("The AUC Value of PR Curve is ", AUC_P)
print(AUC_PR_text)
}
fff <- classification_plots(class1)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::check()
devtools::document()
devtools::load_all()
render("README.Rmd", output_format = "markdown_document")
library(rmarkdown)
render("README.Rmd", output_format = "markdown_document")
render("README.Rmd", output_format = "README.md")
render("README.Rmd", output_format = "markdown_document")
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
